class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        g = collections.defaultdict(list)
        for u, v, w in times:
            g[u].append((v, w))
        
        visited = [False] * (n+1)
        visited[0] = True
        dist = [float('inf')] *(n+1)
        dist[k] = 0
        nxt = k
        
        while (1):
            visited[nxt] = True
            for v, w in g[nxt]:
                dist[v] = min(dist[v], dist[nxt] + w)
            
            tmp = float('inf')
            tmp_id = nxt
            for i in range(1, n+1):
                if not visited[i] and dist[i] < tmp:
                    tmp = dist[i]
                    tmp_id = i
            if tmp_id != nxt:
                nxt = tmp_id
            else:
                break
        ans = max(dist[1:])
        if ans == float('inf'):
            return -1
        else:
            return ans
                
